import os
import styled

package actions {

    let confirmAction = func(question) {
        let ans = input(question + "Y/n")
        return ans.lower() != "n"
    }

    let commit = func() {
        styled.header("📝 Conventional Commit Builder")
        styled.info("─────────────────────────────")

        let allowedTypes = ["feat", "fix", "docs", "style", "refactor", "perf", "test", "chore", "revert"]

        let commitType = input("🔧 Type (feat, fix, docs, style, refactor, perf, test, chore, revert): ")
        if (!(commitType in allowedTypes)) {
            styled.error("⚠️  Invalid type: " + commitType)
        } else {
            styled.success("✅ Valid type: " + commitType)
        }

        let scope = input("🎯 Scope (optional) e.g., authentication: ")
        let description = input("📌 Description: ")
        if (description == "") {
            styled.error("⚠️  This field is required")
        }

        let body = input("💬 Body (optional) - Enter commit body (press Enter for none): ")
        let isBreaking = false
        let breakingDetail = ""
        if (confirmAction("💥 Breaking change?")) {
            isBreaking = true
            breakingDetail = input("📣 Breaking change details: ")
        }

        let issueInput = input("🔗 Issue number (optional) e.g., 123: ")
        let issueRef = ""
        if (issueInput != "") {
            issueRef = "Closes #" + issueInput
        }

        let trailers = []

        let header = ""
        if (scope != "") {
            header = commitType + "(" + scope + "): " + description
        } else {
            header = commitType + ": " + description
        }

        let commitMessage = header
        if (body != "") {
            commitMessage = commitMessage + "\n\n" + body
        }
        if (isBreaking) {
            commitMessage = commitMessage + "\n\nBREAKING CHANGE: " + breakingDetail
        }
        if (issueRef != "") {
            commitMessage = commitMessage + "\n\n" + issueRef
        }
        if (trailers.length() > 0) {
            commitMessage = commitMessage + "\n\n"
        }

        styled.highlight("\n✨ Commit Preview:")
        styled.dim("──────────────────")
        println(commitMessage)
        styled.dim("──────────────────")

        if (!confirmAction("Commit with this message?")) {
            styled.error("🚫 Commit canceled")
            os.exit(0)
        }

        os.run("git add .")
        commitCmd = "git commit -m '" + commitMessage + "'"
        styled.info("Executing: " + commitCmd)
        styled.dim("──────────────────")
        os.run("git commit -m '" + commitMessage + "'")
        os.run("git push")

        styled.success("✅ Successfully committed and pushed!")
    }

    let defaultOutput = func(){
        println("No arguments provided.")
        println("Usage: commit")
        os.exit(1)
    }
}
