import os
import styled

package actions {

    // Helper: confirmation prompt (Y/n)
    let confirmAction = func(question) {
        let ans = prompt(question, "Y/n")
        return ans.toLowerCase() != "n"
    }

    // Conventional commit workflow implementation
    let commit = func() {
        styled.header("📝 Conventional Commit Builder")
        styled.info("─────────────────────────────")

        // Allowed commit types
        let allowedTypes = ["feat", "fix", "docs", "style", "refactor", "perf", "test", "chore", "revert"]

        // Prompt for commit type until valid input is provided
        let commitType = func() {
            while (true) {
                let t = input("🔧 Type", "feat, fix, docs, style, refactor, perf, test, chore, revert: ")
                if (t in allowedTypes) {
                    styled.success("✅ Valid type: " + t)
                    return t
                } else {
                    styled.error("⚠️  Invalid type: " + t)
                }
            }
        }()

        // Optional scope input
        let scope = input("🎯 Scope (optional) e.g authentication: ")

        // Required description – re-prompt if empty
        let description = func() {
            while (true) {
                let d = input("📌 Description ")
                if (d != "") {
                    return d
                } else {
                    styled.error("⚠️  This field is required")
                }
            }
        }()

        // Optional commit body
        let body = input("💬 Body (optional)"+ "Enter commit body (press Enter for none): ")

        // Breaking change section (optional) using a normal if statement
        let isBreaking = false
        let breakingDetail = ""
        if (confirmAction("💥 Breaking change?")) {
            isBreaking = true
            breakingDetail = input("📣 Breaking change details ")
        }

        // Issue reference (optional) using a normal if statement
        let issueInput = input("🔗 Issue number (optional)  e.g., 123")
        let issueRef = ""
        if (issueInput != "") {
            issueRef = "Closes #" + issueInput
        }

        // Trailers – for now, we use an empty list (could be extended with input loops)
        let trailers = []

        // Build commit header using a normal if statement
        let header = ""
        if (scope != "") {
            header = commitType + "(" + scope + "): " + description
        } else {
            header = commitType + ": " + description
        }

        // Build the full commit message
        let commitMessage = header
        if (body != "") {
            commitMessage = commitMessage + "\n\n" + body
        }
        if (isBreaking) {
            commitMessage = commitMessage + "\n\nBREAKING CHANGE: " + breakingDetail
        }
        if (issueRef != "") {
            commitMessage = commitMessage + "\n\n" + issueRef
        }
        if (trailers.length > 0) {
            commitMessage = commitMessage + "\n\n" + trailers.join("\n")
        }

        // Display commit preview
        styled.highlight("\n✨ Commit Preview:")
        styled.dim("──────────────────")
        println(commitMessage)
        styled.dim("──────────────────")

        // Confirm commit action
        if (!confirmAction("Commit with this message?")) {
            styled.error("🚫 Commit canceled")
            os.exit(0)
        }

        // Execute Git workflow
        os.run("git add .")
        os.run("git commit -m '" + commitMessage + "'")
        os.run("git push")

        styled.success("✅ Successfully committed and pushed!")
    }

    // Fallback when no action is provided
    let defaultOutput = func(){
        println("No arguments provided.")
        println("Usage: commit")
        os.exit(1)
    }
}
